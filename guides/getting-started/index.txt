Welcome to RubyMotion
=====================
Laurent Sansonetti <lrz@hipbyte.com>


RubyMotion をご購入いただき誠にありがとうございます。このガイドは RubyMotion の使用を開始するにあたりご一読下さい。

Overview
--------

http://www.rubymotion.com[RubyMotion] はプログラミング言語 Ruby を用いて iOS と OS X アプリケーションを開発するためのツールチェインです。

http://www.apple.com/ios[iOS] は Apple のモバイルオペレーティングシステムで、iPhone や iPod、iPad などさまざまなデバイスを制御しています。http://www.apple.com/osx[OS X] は Apple のデスクトップ OS で、iMac や MacBook Air といった Mac コンピュータを動かしています。

開発者は iOS や OS X 向けのアプリケーションを作成し、そして Apple のアプリケーション配信システムである App Store にアプリケーションを登録できます。

RubyMotion は、主に二つの構成要素から成ります。

* *Runtime*: 新規の Ruby 言語の実装で、ネイティブの Apple のランタイムと密接に統合され iOS デバイスに最適化されています。
* *Project Management*: RubyMotion のプロジェクトを作成・管理、また対話的に開発するためのコマンドラインインタフェースです。他にも、Ruby コードを最適化された機械語にコンパイルする静的なコンパイラと、その場でリアルタイムに式を評価しアプリケーションの動作を変更できるインタラクティブなコンソールがあります。

RubyMotion は '/Library/RubyMotion' にインストールされ、コマンドラインインタフェースのシンボリックリンクが '/usr/bin/motion' に作成されます。

Prerequisites
-------------

RubyMotion の利用には、OSX 10.8.4 以上がインストールされている 64-bit Mac が必要です。OS X 10.9 Mavericks を推奨します。

あらかじめ iOS SDK と OS X SDK を Mac にインストールする必要があります。iOS SDK は Xcode に付属しており、Xcode は App Store アプリケーションを使用して、無料でダウンロード・インストールできます。

NOTE: Xcode は Apple 製の IDE です。RubyMotion でプログラミングするときには Xcode を使う必要はなく、お気に入りのエディタを使い続けることができます。

'App Store' アプリケーションを起動し、検索欄で "Xcode" と検索します。

image:http://www.rubymotion.com/developer-center/guides/getting-started/images/xcode-search.png["Searching for Xcode in the App Store"]

検索結果に表示される 'Xcode' をクリックします。

image:http://www.rubymotion.com/developer-center/guides/getting-started/images/xcode-search2.png["Searching for Xcode in the App Store"]

Xcode の詳細について書かれたページが表示され、そのページで Xcode をダウンロードできます。

Xcode をインストールしたあと、RubyMotion で必要となる Command Line Tools パッケージをインストールします。

'アプリケーション' フォルダにある 'Xcode' を起動します。Xcode の 'Preferences' を表示し、'Downloads' タブをクリックします。リストに 'Command Line Tools' パッケージがありますので、'Install' ボタンをクリックしインストールします。

image:http://www.rubymotion.com/developer-center/guides/getting-started/images/xcode-prefs-download.png["Installing the Command Line Tools package"]

インストールが終われば準備は完了で、Xcode を閉じることができます。

もし、新しいバージョンの Xcode を App Store からインストールする前に古いバージョンの Xcode を使用されていた場合には、Xcode のパスを設定するために以下のように Terminal でコマンドを実行します。

----
$ sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer
----

Software Updates
----------------

コマンドラインから Software アップデートを行うことができます。

以下のコマンドで、最新の RubyMotion をネットワークから取得しインストールします。RubyMotion のアップデートを行う際には、インターネットに接続した環境が必要になります。

----
$ sudo motion update
----

インストールされている RubyMotion のバージョンを確認する場合には、以下のようにコマンドを実行します。

----
$ motion --version
2.24
----

一日に一度、RubyMotion のビルドシステムは新しい RubyMotion がインストールできないか Software アップデートサーバに問い合わせします。

新しい RubyMotion があれば Terminal にメッセージを表示しアップデートを通知します。もしライセンスの有効期限が切れるような場合にも、ビルドシステムはメッセージを表示します。

Support
-------

問題に直面している場合や、機能のリクエストや質問など、コマンドラインから ticket を提出できます。

----
$ motion support
----

ブラウザの新しいウィンドが開かれ、サポート ticket を記入できます。ライセンスキーや開発環境など、いくつかの情報が自動的に記入された状態となっています。

Hello World
-----------

iOS
~~~

最初の RubyMotion iOS プログラム "Hello World" を記述する準備が整いました。

Terminal を起動し、プロジェクトを作成する場所へ移動します。そして、以下のようにコマンドを実行してください。

----
$ motion create Hello
----

このコマンドによって、RubyMotion のプロジェクトが "Hello" という新しいディレクトリに作られます。もしすでに同じディレクトリが存在するなどしディレクトリが作成できない場合には、コマンドの実行は失敗します。

ディレクトリの中身をのぞいてみましょう。

----
$ cd Hello
$ ls
Rakefile app resources spec
----

RubyMotion のプロジェクトは +Rakefile+ をベースとしています。+rake+ は Ruby での標準的なビルドプログラムです。 同様のものとして、Mac OS X では標準で +make+ が付属しています。

'app' ディレクトリにはアプリケーションのコードが含まれます。'resources' ディレクトリには、アイコンや画像、サウンドファイルなど、プロジェクトで使用するリソースが最終的に含まれるでしょう。'spec' ディレクトリには spec やテスト用のファイルが含まれます。

rake のデフォルトタスクを実行してみましょう。

----
$ rake
----

プロジェクトをビルドし、シミュレータが起動します。まだコードを何も書いていないので、真っ黒な空のウィンドウが表示されます。

'app' ディレクトリの中にはデフォルトで作成される 'app_delegate.rb' というファイルがあります。このファイルには、アプリケーションの制御という役割をする AppDelegate が実装されています。

----
class AppDelegate
  def application(application, didFinishLaunchingWithOptions:launchOptions)
    true
  end
end
----

'app/app_delegate.rb' ファイルをお気に入りのエディタで開きます。そして、アラートを表示するコードに変更しましょう。

----
class AppDelegate
  def application(application, didFinishLaunchingWithOptions:launchOptions)
    alert = UIAlertView.new
    alert.message = "Hello World!"
    alert.show
    true
  end
end
----

Terminal で再び +rake+ コマンドを実行すると、シミュレータ上にアラートが表示されます。

image:http://www.rubymotion.com/developer-center/guides/getting-started/images/hello-ios.png["Hello World"]

今度は、iOS デバイスで試してみましょう。開発用に設定された iOS デバイスと USB で接続した状態で、次のコマンドを実行します。

----
$ rake device
----

このコマンドにより、Hello アプリが iOS デバイスへインストールされます。アプリを実行すると、アラートメッセージが表示されることでしょう。

これで、はじめての RubyMotion プログラムの作成が終わりです。どうでしょう、難しかったですか？

OS X
~~~

さぁ、最初の RubyMotion OS X プログラム "Hello World" を記述してみましょう。

Terminal を起動し、プロジェクトを作成する場所へ移動します。そして、以下のようにコマンドを実行してください。

----
$ motion create --template=osx Hello
----

NOTE: +motion+ コマンドに +--template=osx+ というオプションを指定することに注意してください。デフォルトでは、+motion create+ は iOS 用のプロジェクトを作成します。ここでは、OS X プロジェクトを作成したいので、OS X プロジェクトのテンプレートを指定する必要があります。

このコマンドによって、RubyMotion のプロジェクトが "Hello" という新しいディレクトリに作られます。もしすでに同じディレクトリが存在するなどしディレクトリが作成できない場合には、コマンドの実行は失敗します。

ディレクトリの中身をのぞいてみましょう。

----  
$ cd Hello
$ ls
Rakefile app resources spec
----

RubyMotion のプロジェクトは +Rakefile+ をベースとしています。+rake+ は Ruby での標準的なビルドプログラムです。 同様のものとして、Mac OS X では標準で +make+ が付属しています。

'app' ディレクトリにはアプリケーションのコードが含まれます。'resources' ディレクトリには、アイコンや画像、サウンドファイルなど、プロジェクトで使用するリソースが最終的に含まれるでしょう。'spec' ディレクトリには spec やテスト用のファイルが含まれます。

rake のデフォルトタスクを実行してみましょう。

----
$ rake
----

プロジェクトをビルドし、シミュレータが起動します。まだコードを何も書いていないので、空のウィンドウが表示されます。

'app' ディレクトリの中にはデフォルトで作成される 'app_delegate.rb' というファイルがあります。このファイルには、アプリケーションの制御という役割をする AppDelegate が実装されています。

----
class AppDelegate
  def applicationDidFinishLaunching(notification)
    buildMenu
    buildWindow
  end
end
----

'app/app_delegate.rb' ファイルをお気に入りのエディタで開きます。そして、アラートを表示するといった、なにかおもしろいコードに変更しましょう。

----
class AppDelegate
  def applicationDidFinishLaunching(notification)
    buildMenu
    buildWindow

    alert = NSAlert.new
    alert.messageText = "Hello World!"
    alert.runModal
  end
end
----

Terminal で再び +rake+ コマンドを実行すると、シミュレータ上にアラートが表示されます。

image:http://www.rubymotion.com/developer-center/guides/getting-started/images/hello-osx.png["Hello World"]

おめでとうございます、みなさんは最初の RubyMotion iOS, OS X プログラムを作ることに成功しました。それほど難しくなかったでしょう？

And Now?
--------

いくつか iOS と OS X のサンプルコードが GitHub の https://github.com/HipByte/RubyMotionSamples[Sample Code Repository] にあります。サブフォルダは、上記のように作成した RubyMotion プロジェクトです。 サブフォルダで +rake+ コマンドを実行しアプリを試すことや、'app' ディレクトリ内のソースコードを確認することができます。

そのほかのガイドや RubyMotion に関する記事、screencast などは http://www.rubymotion.com/developer-center[Developer Center] で確認してください。
